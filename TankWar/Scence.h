#pragma once
#include "../../../../Common/MathHelper.h"
#include "../../../../Common/UploadBuffer.h"
#include "../../../../Common/GeometryGenerator.h"
#include "../../../../Common/GameTimer.h"
#include <memory>
#include <vector>
#include "FrameResource.h"
#include "LinkedAllocator.h"

//判断ControlItem是否处于显示状态
#define IS_CONTROLITEM_VISIBLE(ControlItemRef) (ControlItemRef.Property & (0x01))

//************************************** 以Z轴正半轴为前	以Y轴正方向为上		X轴正方向为右**********************************************

//可控制对象。
struct ControlItem
{
	//旋转，x对应俯仰角(Pitch)，y对应偏航角（Yaw），z对应滚动角（Roll）。
	XMFLOAT3 Rotation;

	//平移信息。
	XMFLOAT3 Translation;

	//相对坐标系，默认是世界坐标，即一个单位矩阵，只能包含旋转和平移变换。
	XMFLOAT4X4 ReferenceCoordinate;

	//ControlItem的其他属性标记，
	//**** ***1显示渲染物体，	**** ***0表示隐藏渲染物体。
	BYTE Property;

	//对应FrameResource的更新次数。
	UINT NumFramesDirty = gNumFrameResources;

	//世界变换矩阵。
	XMFLOAT4X4 World = MathHelper::Identity4x4();

	//在一个buffer中，此物体所在的Resource的序号。
	UINT ObjCBIndex = 1;

	//材质对象。
	Material* Mat = nullptr;

	//包含此物体网格定义的对象指针。
	MeshGeometry *Geo = nullptr;

	//图元格式，默认为三角形列表。
	D3D12_PRIMITIVE_TOPOLOGY PrimitiveType = D3D_PRIMITIVE_TOPOLOGY_LINELIST;

	//顶点数量。
	UINT IndexCount = 0;
	//索引的开始数量。
	UINT StartIndexLocation = 0;
	//基本顶点位置。
	int BaseVertexLocation = 0;

public:
	//增加偏航角
	void RotateYaw(float d) 
	{
		this->Rotation.y += d; 
		NumFramesDirty = gNumFrameResources;
	}
	//增加俯仰角
	void RotatePitch(float d)
	{
		this->Rotation.x += d;
		NumFramesDirty = gNumFrameResources;
	}
	//增加滚动角
	void RotateRoll(float d)
	{
		this->Rotation.z += d;
		NumFramesDirty = gNumFrameResources;
	}
	//向X轴正向移动。
	void MoveX(float d)
	{
		this->Translation.x += d;
		NumFramesDirty = gNumFrameResources;
	}
	//向Y轴正向移动。
	void MoveY(float d)
	{
		this->Translation.y += d;
		NumFramesDirty = gNumFrameResources;
	}
	//向Z轴正向移动。
	void MoveZ(float d)
	{
		this->Translation.z += d;
		NumFramesDirty = gNumFrameResources;
	}

	//将ControlItemd的显示属性设为隐藏。
	void Hide()
	{
		//0xfe = b 1111 1110，
		//最后一个字设为0。
		this->Property &= 0xfe;
	}
	//将ControlItemd的显示属性设为显示。
	void Show()
	{
		//0x01 = b 0000 0001，
		//最后一个字设为1。
		this->Property |= 0x01;
	}
};

//摄像机结构，包含渲染一个画面所需要的所有镜头信息。
struct MyCamera
{
public:
	//摄像机的序号，一个场景中可以创建多个摄像机，通过这个序号来区分摄像机。
	UINT Id;
	//摄像机位置，规定m_cameraPos.Next是摄像机的观察点。
	ControlItem* Pos;
	//摄像机的目标。
	ControlItem* Target;
};

//Scence用来保存所有可渲染物体的位置，并且更新物体的位置。
class Scence
{
public:
	//一个场景中最多的渲染物体数量、摄像机数量，
	//设置材质对象指针、总的网格对象指针。
	Scence(UINT totalRenderItemNum,	UINT totalCameraNum,
		std::unordered_map<std::string, std::unique_ptr<Material>>* pMaterials,
		std::unordered_map<std::string, std::unique_ptr<MeshGeometry>>* m_pGeometries);
	~Scence();
	Scence() = delete;
	Scence(const Scence&) = delete;
	Scence& operator = (const Scence&) = delete;

	//将ControlItem中的旋转和平移信息更新到对应的RenderItem中。
	void UpdateData(const GameTimer& gt, FrameResource* pCurrFrameResource);

	//场景中指定序号的摄像机，目前这个方法只会返回序号为0的摄像机，如果这个摄像机还没有创建，就返回nullptr。
	MyCamera* GetCamera(UINT cameraIndex);
	//创建新的摄像机，目前这个方法没有功能实现，只考虑一个摄像头的情况。
	MyCamera* AppendCamera();
	//删除摄像机。
	void DeleteCamera(MyCamera* pCamera);

	//返回一个ControlItem，
	//NameofGeometry，几何形体集合的名字；
	//NameOfSubmesh，具体网格的名字；
	//NameOfMaterial，材质的名字。
	ControlItem* NewControlItem(const char* NameOfGeometry, const char* NameOfSubmesh, const char* NameOfMaterial);
	//回收ControlItem的内存。
	void DeleteControlItem(ControlItem* pControlItem);

public:
	//ControlItem分配池。
	std::unique_ptr<LinkedAllocator<ControlItem>> m_controlItemAllocator;
	//指向程序里面创建的所有材质，注意：这是个指针。
	std::unordered_map<std::string, std::unique_ptr<Material>>* m_pMaterials;
	//指向程序里面创建的所有形状，注意：这是个指针。
	std::unordered_map<std::string, std::unique_ptr<MeshGeometry>>* m_pGeometries;
	//目前只考虑一个摄像头的情况。
	MyCamera* m_pCamera = nullptr;
};